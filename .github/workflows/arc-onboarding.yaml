name: Azure Arc Onboard (Windows Self-hosted)

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'Name of the Kubernetes cluster (must match created vCluster)'
        required: true
      namespace_name:
        description: 'Namespace inside the cluster'
        required: true

jobs:
  deploy-vcluster:
    environment: aks
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh
    env:
      CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
      NAMESPACE_NAME: ${{ github.event.inputs.namespace_name }}
      RESOURCE_GROUP: AzureArcVClusterTest
      LOCATION: WestUS3
      KUBECONFIG: ${{ vars.KUBECONFIG }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Connect to vCluster
        run: |
          Start-Process -FilePath "vcluster" -ArgumentList "connect ${{ env.CLUSTER_NAME }} -n ${{ env.NAMESPACE_NAME }} --update-current"

      - name: Wait for vCluster connection to be ready
        run: |
          $maxRetries = 60
          $retries = 0
          while ($true) {
              try {
                  # Test the connection using a simple command
                  kubectl get --raw=/healthz
                  Write-Output "vCluster connection is ready."
                  break
              } catch {
                  Write-Output "Waiting for vCluster connection... ($($retries + 1)/$maxRetries)"
                  $retries++
                  if ($retries -ge $maxRetries) {
                      throw "Failed to connect to vCluster after $maxRetries retries."
                  }
                  Start-Sleep -Seconds 5
              }
          }

      - name: Set kube context to vCluster
        run: |
          $contextName = "vcluster_${env:CLUSTER_NAME}_${env:NAMESPACE_NAME}_leviathan-dev01"
          kubectl config use-context $contextName

      - name: Fix kubeconfig server URL to IPv4
        run: |
          $context = kubectl config current-context
          $cluster = (kubectl config view -o json | ConvertFrom-Json).contexts | Where-Object { $_.name -eq $context } | Select-Object -ExpandProperty context | Select-Object -ExpandProperty cluster
          $server = (kubectl config view -o json | ConvertFrom-Json).clusters | Where-Object { $_.name -eq $cluster } | Select-Object -ExpandProperty cluster | Select-Object -ExpandProperty server
          if ($server -match 'localhost') {
            $newServer = $server -replace 'localhost', '127.0.0.1'
            kubectl config set "clusters.$cluster.server" $newServer
          }

      - name: Apply Azure Arc namespace and limitrange YAML
        run: |
          kubectl apply -f ./arc-ns/arc-ns.yaml

      - name: Create Resource Group in Azure (if not exists)
        run: |
          az group create `
            --name $env:RESOURCE_GROUP `
            --location $env:LOCATION `
            --output table

      - name: Connect Kubernetes Cluster to Azure Arc
        run: |
          az connectedk8s connect `
            --name $env:CLUSTER_NAME `
            --resource-group $env:RESOURCE_GROUP